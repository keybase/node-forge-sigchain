// Generated by IcedCoffeeScript 108.0.12
(function() {
  var LinkIDGen, PerTeamKeyBox, PerTeamKeyBoxes, PerTeamSecretKeySet, PerTeamSecretKeys, PerUserSecretKeys, RatchetBlindingKey, RatchetBlindingKeySet, SHA256, Team, TeamForge, UnsupportedLink, User, akatch, assert, athrow, compute_seed_check, constants, copy_obj, createHash, createHmac, iced, kbpgp, make_esc, make_prng, maybe_unhex, pack, prng, proofs, unhex, unix_time, unpack, __iced_k, __iced_k_noop, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  _ref = require('iced-utils').util, athrow = _ref.athrow, akatch = _ref.akatch, unix_time = _ref.unix_time;

  kbpgp = require('kbpgp');

  proofs = require('keybase-proofs');

  constants = proofs.constants;

  _ref1 = require('crypto'), prng = _ref1.prng, createHash = _ref1.createHash, createHmac = _ref1.createHmac;

  make_prng = require('./badprng').make_prng;

  _ref2 = require('./teamlib'), PerUserSecretKeys = _ref2.PerUserSecretKeys, PerTeamSecretKeys = _ref2.PerTeamSecretKeys, PerTeamKeyBoxes = _ref2.PerTeamKeyBoxes, PerTeamSecretKeySet = _ref2.PerTeamSecretKeySet, PerTeamKeyBox = _ref2.PerTeamKeyBox, RatchetBlindingKey = _ref2.RatchetBlindingKey, RatchetBlindingKeySet = _ref2.RatchetBlindingKeySet;

  copy_obj = require('./util').copy_obj;

  _ref3 = require('purepack'), pack = _ref3.pack, unpack = _ref3.unpack;

  assert = function(condition, msg) {
    if (!condition) {
      throw new Error(msg);
    }
  };

  unhex = function(x) {
    var e, _i, _len, _results;
    if (Array.isArray(x)) {
      _results = [];
      for (_i = 0, _len = x.length; _i < _len; _i++) {
        e = x[_i];
        _results.push(unhex(e));
      }
      return _results;
    } else if (typeof x === 'string') {
      return Buffer.from(x, 'hex');
    } else if (Buffer.isBuffer(x)) {
      return x;
    } else {
      throw new Error("can't unhex: " + (x.toString()));
    }
  };

  maybe_unhex = function(x) {
    if (x == null) {
      return null;
    } else if (Buffer.isBuffer(x)) {
      return x;
    } else {
      return unhex(x);
    }
  };

  compute_seed_check = function(_arg) {
    var g, new_check, prev, prev_value, ptsk, team_id;
    team_id = _arg.team_id, ptsk = _arg.ptsk, prev = _arg.prev;
    prev_value = prev != null ? prev.seed_check.h : Buffer.concat([Buffer.from("Keybase-Derived-Team-Seedcheck-1", 'utf8'), Buffer.alloc(1), maybe_unhex(team_id)]);
    g = function(seed, prev) {
      var ret;
      ret = createHmac('sha512', seed).update(prev).digest().slice(0, 32);
      return ret;
    };
    new_check = g(ptsk.seed, prev_value);
    ptsk.seed_check = {
      h: new_check,
      v: 1
    };
    return {
      h: SHA256(new_check),
      v: 1
    };
  };

  exports.TeamForge = TeamForge = (function() {
    function TeamForge(_arg) {
      this.chain = _arg.chain;
    }

    TeamForge.prototype.forge = function(cb) {
      var esc, label, link_desc, team, team_desc, user, user_desc, user_label, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TeamForge::forge");
      this.prng = make_prng();
      this.teams = {};
      this.users = {};
      this.out = {
        log: [],
        teams: {},
        users: {},
        key_owners: {},
        key_pubkeyv2nacls: {},
        team_merkle: {},
        merkle_triples: {},
        sessions: this.chain.sessions,
        skip: !!this.chain.skip,
        load_failure: this.chain.load_failure
      };
      this._link_id_gen = new LinkIDGen;
      this.default_user_label = "herb";
      (function(_this) {
        return (function(__iced_k) {
          var _i, _k, _keys, _ref4, _results, _while;
          _ref4 = _this.chain.users;
          _keys = (function() {
            var _results1;
            _results1 = [];
            for (_k in _ref4) {
              _results1.push(_k);
            }
            return _results1;
          })();
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _keys.length)) {
              return _break();
            } else {
              user_label = _keys[_i];
              user_desc = _ref4[user_label];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                  funcname: "TeamForge.forge"
                });
                User.make({
                  forge: _this,
                  label: user_label,
                  user_desc: user_desc
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return user = arguments[0];
                    };
                  })(),
                  lineno: 89
                })));
                __iced_deferrals._fulfill();
              })(function() {
                _this.users[user_label] = user;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                    funcname: "TeamForge.forge"
                  });
                  user.apply(_this.out, esc(__iced_deferrals.defer({
                    lineno: 91
                  })));
                  __iced_deferrals._fulfill();
                })(_next);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _i, _k, _keys, _ref4, _results, _while;
            _ref4 = _this.chain.teams;
            _keys = (function() {
              var _results1;
              _results1 = [];
              for (_k in _ref4) {
                _results1.push(_k);
              }
              return _results1;
            })();
            _i = 0;
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = __iced_k;
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = _continue;
              if (!(_i < _keys.length)) {
                return _break();
              } else {
                label = _keys[_i];
                team_desc = _ref4[label];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                    funcname: "TeamForge.forge"
                  });
                  Team.make({
                    forge: _this,
                    label: label
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return team = arguments[0];
                      };
                    })(),
                    lineno: 94
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  _this.teams[label] = team;
                  (function(__iced_k) {
                    var _j, _len, _ref5, _results1, _while;
                    _ref5 = team_desc.links;
                    _len = _ref5.length;
                    _j = 0;
                    _while = function(__iced_k) {
                      var _break, _continue, _next;
                      _break = __iced_k;
                      _continue = function() {
                        return iced.trampoline(function() {
                          ++_j;
                          return _while(__iced_k);
                        });
                      };
                      _next = _continue;
                      if (!(_j < _len)) {
                        return _break();
                      } else {
                        link_desc = _ref5[_j];
                        _this.push_log("link team:" + label + " type:" + link_desc.type);
                        user = _this.users[link_desc.signer || _this.default_user_label];
                        assert(user != null, "signing user '" + link_desc.signer + "'");
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                            funcname: "TeamForge.forge"
                          });
                          team.forge_link({
                            link_desc: link_desc,
                            user: user
                          }, esc(__iced_deferrals.defer({
                            lineno: 101
                          })));
                          __iced_deferrals._fulfill();
                        })(_next);
                      }
                    };
                    _while(__iced_k);
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                        funcname: "TeamForge.forge"
                      });
                      team.apply(_this.out, esc(__iced_deferrals.defer({
                        lineno: 103
                      })));
                      __iced_deferrals._fulfill();
                    })(_next);
                  });
                });
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(null, _this.out);
          });
        };
      })(this));
    };

    TeamForge.prototype.push_log = function(x) {
      return this.out.log.push(x);
    };

    TeamForge.prototype._hash_meta = function(number) {
      var base, num_str;
      base = "cd".repeat(32);
      num_str = number.toString();
      return base.slice(0, -num_str.length) + num_str;
    };

    TeamForge.prototype._gen_key = function(typ, cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      switch (typ) {
        case 'eddsa':
          return __iced_k(kbpgp.kb.KeyManager.generate({
            seed: this.prng(32)
          }, cb));
        case 'dh':
          return __iced_k(kbpgp.kb.EncKeyManager.generate({
            seed: this.prng(32)
          }, cb));
        default:
          (function(_this) {
            return (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                funcname: "TeamForge._gen_key"
              });
              athrow(new Error("unknown key type: " + typ), __iced_deferrals.defer({
                lineno: 128
              }));
              __iced_deferrals._fulfill();
            });
          })(this)(__iced_k);
      }
    };

    return TeamForge;

  })();

  LinkIDGen = (function() {
    function LinkIDGen() {
      this.n = 0;
    }

    LinkIDGen.prototype.next_link_id = function() {
      var base, num_str;
      base = "ef".repeat(32);
      num_str = (this.n++).toString();
      return base.slice(0, -num_str.length) + num_str;
    };

    return LinkIDGen;

  })();

  User = (function() {
    User.make = function(args, cb) {
      var obj;
      obj = new User(args);
      return obj._init(function(err) {
        return cb(err, obj);
      });
    };

    function User(_arg) {
      this.forge = _arg.forge, this.label = _arg.label, this.user_desc = _arg.user_desc, this.username = _arg.username, this.eldest_seqno = _arg.eldest_seqno;
    }

    User.prototype._init = function(cb) {
      var esc, key_desc, key_label, km_enc, km_sig, pubkeyv2nacl, ___iced_passed_deferral, __iced_deferrals, __iced_k, _base, _base1;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TeamForge::User::_init");
      this.username || (this.username = this.label);
      this.eldest_seqno || (this.eldest_seqno = 1);
      this.uid = this._gen_uid({
        label: this.label
      });
      this.keys = {};
      (_base = this.user_desc).keys || (_base.keys = {});
      (_base1 = this.user_desc.keys)["default"] || (_base1["default"] = {});
      (function(_this) {
        return (function(__iced_k) {
          var _i, _k, _keys, _ref4, _results, _while;
          _ref4 = _this.user_desc.keys;
          _keys = (function() {
            var _results1;
            _results1 = [];
            for (_k in _ref4) {
              _results1.push(_k);
            }
            return _results1;
          })();
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _keys.length)) {
              return _break();
            } else {
              key_label = _keys[_i];
              key_desc = _ref4[key_label];
              _this.forge.push_log("user:" + _this.label + " key:" + key_label);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                  funcname: "User._init"
                });
                _this.forge._gen_key('eddsa', esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return km_sig = arguments[0];
                    };
                  })(),
                  lineno: 168
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                    funcname: "User._init"
                  });
                  _this.forge._gen_key('dh', esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return km_enc = arguments[0];
                      };
                    })(),
                    lineno: 169
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  pubkeyv2nacl = {
                    deviceType: "desktop",
                    deviceDescription: "home thing",
                    deviceID: "fbd762facdfad44709aef63a9a8cdf18",
                    base: {
                      eTime: 2005146762000,
                      cTime: 1500570762000,
                      isEldest: true,
                      isSibkey: true,
                      kid: km_sig.get_ekid().toString("hex")
                    }
                  };
                  pubkeyv2nacl.base.provisioning = {
                    sigChainLocation: {
                      seqno: 1,
                      seqType: 1
                    },
                    signingKID: km_sig.get_ekid().toString("hex"),
                    time: 0,
                    firstAppearedUnverified: 0,
                    prevMerkleRootSigned: {
                      hashMeta: _this.forge._hash_meta(500),
                      seqno: 0
                    }
                  };
                  if (key_desc.revoke != null) {
                    pubkeyv2nacl.base.revocation = {
                      sigChainLocation: {
                        seqno: key_desc.revoke.seqno,
                        seqType: 1
                      },
                      signingKID: km_sig.get_ekid().toString("hex"),
                      prevMerkleRootSigned: {
                        hashMeta: _this.forge._hash_meta(key_desc.revoke.merkle_hashmeta),
                        seqno: 0
                      },
                      time: 0,
                      firstAppearedUnverified: 0
                    };
                  }
                  return _next(_this.keys[key_label] = {
                    signing: km_sig,
                    encryption: km_enc,
                    pubkeyv2nacl: pubkeyv2nacl
                  });
                });
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          _this.puk_secrets = {
            1: _this.forge.prng(32).toString('hex')
          };
          _this.link_map = {
            1: _this.forge._link_id_gen.next_link_id()
          };
          return cb(null);
        };
      })(this));
    };

    User.prototype.apply = function(out, cb) {
      var esc, keys, kid, label, puk_kms, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "User::apply");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "User.apply"
          });
          _this.get_puk_kms(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return puk_kms = arguments[0];
              };
            })(),
            lineno: 221
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref4;
          out.users[_this.label] = {
            uid: _this.uid,
            eldest_seqno: _this.eldest_seqno,
            puk_secrets: _this.puk_secrets,
            link_map: _this.link_map,
            debug_puk_enc_kid: puk_kms.encryption.get_ekid().toString('hex')
          };
          _ref4 = _this.keys;
          for (label in _ref4) {
            keys = _ref4[label];
            kid = keys.signing.get_ekid().toString("hex");
            out.key_owners[kid] = _this.label;
            out.key_pubkeyv2nacls[kid] = keys.pubkeyv2nacl;
          }
          return cb(null);
        };
      })(this));
    };

    User.prototype.get_puk_kms = function(cb) {
      var esc, s, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "User::get_puk_kms");
      s = new PerUserSecretKeys({
        seed: Buffer.from(this.puk_secrets[1], 'hex'),
        prng: this.forge.prng
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "User.get_puk_kms"
          });
          s.derive({}, esc(__iced_deferrals.defer({
            lineno: 242
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, s.kms);
        };
      })(this));
    };

    User.prototype.uv_str = function() {
      if (this.eldest_seqno !== 1) {
        return "" + this.uid + "%" + eldest_seqno;
      } else {
        return this.uid;
      }
    };

    User.prototype._gen_uid = function(_arg) {
      var h, id, label;
      label = _arg.label;
      h = (SHA256(label)).slice(0, 15);
      id = h.toString('hex') + "19";
      return id;
    };

    return User;

  })();

  Team = (function() {
    Team.make = function(args, cb) {
      var obj;
      obj = new Team(args);
      return obj._init(function(err) {
        return cb(err, obj);
      });
    };

    function Team(_arg) {
      this.forge = _arg.forge, this.label = _arg.label, this.name = _arg.name;
    }

    Team.prototype._init = function(cb) {
      var esc;
      esc = make_esc(cb, "Team::_init");
      this.name || (this.name = this.label);
      this.id = this._hash_team_id(this.name);
      this.ptsks_list = [];
      this.team_key_boxes = [];
      this.links = [];
      this.hidden_links = [];
      this.last_committed_hidden_tail = null;
      this.ratchets = [];
      this.tmp_state = {};
      return cb(null);
    };

    Team.prototype.apply = function(out, cb) {
      var esc, link, ptsk, _i, _len, _ref4;
      esc = make_esc(cb, "Team::apply");
      out.teams[this.label] = {
        id: this.id,
        links: (function() {
          var _i, _len, _ref4, _results;
          _ref4 = this.links;
          _results = [];
          for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
            link = _ref4[_i];
            _results.push(link.for_client);
          }
          return _results;
        }).call(this),
        team_key_boxes: this.team_key_boxes,
        debug_tk_secs: [
          (function() {
            var _i, _len, _ref4, _results;
            _ref4 = this.ptsks_list;
            _results = [];
            for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
              ptsk = _ref4[_i];
              _results.push(ptsk.seed.toString('hex'));
            }
            return _results;
          }).call(this)
        ],
        debug_tk_sig_kids: [
          (function() {
            var _i, _len, _ref4, _results;
            _ref4 = this.ptsks_list;
            _results = [];
            for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
              ptsk = _ref4[_i];
              _results.push(ptsk.kms.signing.get_ekid().toString('hex'));
            }
            return _results;
          }).call(this)
        ],
        hidden: (function() {
          var _i, _len, _ref4, _results;
          _ref4 = this.hidden_links;
          _results = [];
          for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
            link = _ref4[_i];
            _results.push(link.for_client.bundle);
          }
          return _results;
        }).call(this),
        ratchet_blinding_keys: RatchetBlindingKeySet.generate(this.ratchets).encode()
      };
      _ref4 = this.links;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        link = _ref4[_i];
        out.team_merkle[this.id] = {
          seqno: link.for_client.seqno,
          link_id: link.link_id,
          hidden_response: link.for_client.hidden_response
        };
        out.team_merkle["" + this.id + "-seqno:" + link.for_client.seqno] = {
          seqno: link.for_client.seqno,
          link_id: link.link_id,
          hidden_response: link.for_client.hidden_response
        };
      }
      return cb(null);
    };

    Team.prototype.forge_link = function(_arg, cb) {
      var link_desc, user;
      link_desc = _arg.link_desc, user = _arg.user;
      switch (link_desc.type) {
        case 'root':
          return this._forge_link_root({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'change_membership':
          return this._forge_link_change_membership({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'invite':
          return this._forge_link_invite({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'leave':
          return this._forge_link_leave({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'rotate_key':
          return this._forge_link_rotate_key({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'new_subteam':
          return this._forge_link_new_subteam({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'rotate_key_hidden':
          return this._forge_link_rotate_key_hidden({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'unsupported':
          return this._forge_link_unsupported({
            link_desc: link_desc,
            user: user
          }, cb);
        default:
          return cb(new Error("unhandled link type: " + link_desc.type), null);
      }
    };

    Team.prototype._forge_link_helper_hidden = function(_arg, cb) {
      var bundle, ctime, esc, existing_hook, f, hash_meta, hidden_seqno, inner, km_sig, link_desc, link_entry, link_id, outer, parent_chain_tail, prev, proof, proof_gen_out, proof_klass, raw, reverse_sig_inputs, seqno, sig3_patch_inner, sig3_patch_outer, sig_arg, sig_arg_kms, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user, proof_klass = _arg.proof_klass, sig_arg_team = _arg.sig_arg_team, sig_arg_kms = _arg.sig_arg_kms;
      esc = make_esc(cb, "_forge_link_helper_hidden");
      km_sig = user.keys["default"].signing;
      hidden_seqno = link_desc.hidden_seqno || this._next_hidden_seqno();
      seqno = this._last_seqno();
      hash_meta = this.forge._hash_meta(991 * seqno);
      prev = null;
      if (this.hidden_links.length > 0) {
        prev = this.hidden_links[this.hidden_links.length - 1].link_id;
      }
      parent_chain_tail = null;
      if (this.links.length > 0) {
        parent_chain_tail = {
          hash: maybe_unhex((_ref4 = this.links[this.links.length - 1]) != null ? _ref4.link_id : void 0),
          seqno: this.links.length,
          chain_type: proofs.constants.seq_types.SEMIPRIVATE
        };
      }
      sig_arg_team.is_public || (sig_arg_team.is_public = false);
      sig_arg_team.is_implicit || (sig_arg_team.is_implicit = false);
      ctime = 1500570000 + 1;
      sig_arg = {
        user: {
          local: {
            uid: maybe_unhex(user.uid),
            eldest_seqno: 1
          }
        },
        sig_eng: km_sig.make_sig_eng(),
        seqno: hidden_seqno,
        prev: maybe_unhex(prev),
        ctime: ctime,
        entropy: Buffer.alloc(16),
        merkle_root: {
          ctime: ctime,
          hash: maybe_unhex("ff".repeat(64)),
          hash_meta: hash_meta,
          seqno: 8001
        },
        team: sig_arg_team,
        per_team_keys: [
          {
            ptk_type: proofs.constants.ptk_types.reader,
            generation: sig_arg_kms.generation,
            enc_km: sig_arg_kms.encryption,
            sig_km: sig_arg_kms.signing,
            seed_check: sig_arg_kms.seed_check
          }
        ],
        parent_chain_tail: parent_chain_tail,
        ignore_if_unsupported: false
      };
      if (link_desc.admin != null) {
        sig_arg.team.admin = {
          id: maybe_unhex(link_desc.admin.id),
          seqno: link_desc.admin.seqno,
          chain_type: link_desc.admin.seq_type
        };
      }
      if ((f = (_ref5 = link_desc.corruptors) != null ? _ref5.sig_arg : void 0) != null) {
        sig_arg = f(sig_arg);
      }
      proof = new proof_klass(sig_arg);
      if ((_ref6 = link_desc.corruptors) != null ? _ref6.no_reverse_sig : void 0) {
        proof._v_reverse_sign = function(_arg1, cb) {
          var inner, outer;
          inner = _arg1.inner, outer = _arg1.outer;
          return cb(null, {
            inner: inner,
            outer: outer
          });
        };
      }
      if ((reverse_sig_inputs = (_ref7 = link_desc.corruptors) != null ? _ref7.reverse_sig_inputs : void 0) != null) {
        existing_hook = proof._v_reverse_sign.bind(proof);
        proof._v_reverse_sign = function(_arg1, cb) {
          var err, inner, outer, res, ___iced_passed_deferral1, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral1 = iced.findDeferral(arguments);
          inner = _arg1.inner, outer = _arg1.outer;
          inner = copy_obj(inner);
          reverse_sig_inputs({
            inner: inner,
            outer: outer
          });
          (function(_this) {
            return (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                funcname: "_v_reverse_sign"
              });
              existing_hook({
                inner: inner,
                outer: outer
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return res = arguments[1];
                  };
                })(),
                lineno: 397
              }));
              __iced_deferrals._fulfill();
            });
          })(this)((function(_this) {
            return function() {
              return cb(err, res);
            };
          })(this));
        };
      }
      if ((sig3_patch_outer = (_ref8 = link_desc.corruptors) != null ? _ref8.sig3_patch_outer : void 0) != null) {
        existing_hook = proof._generate_outer.bind(proof);
        proof._generate_outer = function(_arg1) {
          var decoded, inner, orig, _, _ref9;
          inner = _arg1.inner;
          orig = existing_hook({
            inner: inner
          });
          _ref9 = proofs.sig3.OuterLink.decode(orig), _ = _ref9[0], decoded = _ref9[1];
          decoded = sig3_patch_outer(decoded);
          return decoded.encode();
        };
      }
      if ((sig3_patch_inner = (_ref9 = link_desc.corruptors) != null ? _ref9.sig3_patch_inner : void 0) != null) {
        existing_hook = proof._encode_inner.bind(proof);
        proof._encode_inner = function(opts) {
          var json;
          json = existing_hook(opts);
          json = sig3_patch_inner(json);
          return json;
        };
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_helper_hidden"
          });
          proof.generate({}, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return proof_gen_out = arguments[0];
              };
            })(),
            lineno: 415
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref10, _ref11;
          link_id = SHA256(proof_gen_out.json.outer, 'hex');
          outer = proof_gen_out.armored.outer;
          inner = proof_gen_out.armored.inner;
          if ((f = (_ref10 = link_desc.corruptors) != null ? _ref10.sig3_corrupt_outer : void 0) != null) {
            raw = f(unpack(Buffer.from(outer, 'base64')));
            outer = pack(raw).toString('base64');
          }
          bundle = {
            i: inner,
            o: outer,
            s: proof_gen_out.armored.sig
          };
          if ((_ref11 = link_desc.corruptors) != null) {
            if (typeof _ref11.sig3_bundle === "function") {
              _ref11.sig3_bundle({
                bundle: bundle
              });
            }
          }
          link_entry = {
            proof: proof,
            proof_gen_out: proof_gen_out,
            link_id: link_id,
            for_client: {
              seqno: seqno,
              uid: user.uid,
              bundle: bundle,
              version: 3,
              debug_link_id: link_id,
              debug_payload: bundle,
              hidden_response: {
                resp_type: !(_this.last_committed_hidden_tail != null) ? 2 : 3,
                committed_hidden_tail: _this.last_committed_hidden_tail,
                uncommitted_seqno: hidden_seqno
              }
            }
          };
          _this.hidden_links.push(link_entry);
          return cb(null, {
            link_entry: link_entry
          });
        };
      })(this));
    };

    Team.prototype._make_ratchet = function(_arg) {
      var arg, f, hidden, link_desc, r, _ref4, _ref5, _ref6, _ref7;
      hidden = _arg.hidden, link_desc = _arg.link_desc;
      arg = {
        link_id: maybe_unhex(hidden.link_id),
        seqno: ((_ref4 = link_desc.corruptors) != null ? _ref4.ratchet_seqno : void 0) || hidden.for_client.hidden_response.uncommitted_seqno,
        chain_type: proofs.constants.seq_types.TEAM_HIDDEN,
        prng: (function(_this) {
          return function(i) {
            return _this.forge.prng(i);
          };
        })(this)
      };
      if ((f = (_ref5 = link_desc.corruptors) != null ? _ref5.generate_ratchet_arg : void 0) != null) {
        f(arg);
      }
      r = RatchetBlindingKey.generate(arg);
      if ((f = (_ref6 = link_desc.corruptors) != null ? _ref6.generated_ratchet : void 0)) {
        f(r);
      }
      if (!((_ref7 = link_desc.corruptors) != null ? _ref7.drop_ratchet_blinding_key : void 0)) {
        this.ratchets.push(r);
      }
      return r;
    };

    Team.prototype._forge_link_helper = function(_arg, cb) {
      var b4, ctime, esc, f, hash_meta, hidden_prev, hm_num, km_sig, link_desc, link_entry, link_id, prev, proof, proof_gen_out, proof_klass, ratchet, saved_customize_hook, seqno, sig_arg, sig_arg_kms, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref10, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user, proof_klass = _arg.proof_klass, sig_arg_team = _arg.sig_arg_team, sig_arg_kms = _arg.sig_arg_kms;
      esc = make_esc(cb, "_forge_link_helper");
      km_sig = user.keys["default"].signing;
      seqno = link_desc.seqno || this._next_seqno();
      hash_meta = this.forge._hash_meta(1000 * seqno);
      prev = null;
      if (this.links.length > 0) {
        prev = this.links[this.links.length - 1].link_id;
      }
      if (((_ref4 = link_desc.corruptors) != null ? _ref4.prev : void 0) != null) {
        prev = (_ref5 = link_desc.corruptors) != null ? _ref5.prev(prev) : void 0;
      }
      ratchet = null;
      if ((hidden_prev = (_ref6 = this.hidden_links.slice(-1)) != null ? _ref6[0] : void 0) != null) {
        if ((f = (_ref7 = link_desc.corruptors) != null ? _ref7.hidden_prev : void 0) != null) {
          hidden_prev = f(hidden_prev, this.tmp_state);
        }
        ratchet = this._make_ratchet({
          hidden: hidden_prev,
          link_desc: link_desc
        });
      }
      ctime = 1500570000 + 1;
      sig_arg = {
        seqno: seqno,
        ctime: ctime,
        user: {
          local: {
            username: user.username,
            uid: user.uid
          }
        },
        merkle_root: {
          ctime: ctime,
          hash: "ff".repeat(64),
          hash_meta: hash_meta,
          seqno: 8001
        },
        sig_eng: km_sig.make_sig_eng()
      };
      if (prev !== null) {
        sig_arg.prev = prev;
      }
      if (link_desc.ignore_if_unsupported != null) {
        this.forge.push_log("ignore_if_unsupported:" + link_desc.ignore_if_unsupported + " link_type:" + link_desc.type);
        sig_arg.ignore_if_unsupported = link_desc.ignore_if_unsupported;
      }
      if (sig_arg_team != null) {
        sig_arg.team = sig_arg_team;
      }
      if (link_desc.admin != null) {
        sig_arg.team.admin = link_desc.admin;
      }
      if (sig_arg_kms != null) {
        sig_arg.kms = sig_arg_kms;
      }
      if (((_ref8 = link_desc.corruptors) != null ? _ref8.sig_arg : void 0) != null) {
        sig_arg = (_ref9 = link_desc.corruptors) != null ? _ref9.sig_arg(sig_arg) : void 0;
      }
      if (ratchet != null) {
        sig_arg.team.ratchets = [ratchet.id()];
      }
      proof = new proof_klass(sig_arg);
      if (((_ref10 = link_desc.corruptors) != null ? _ref10.per_team_key : void 0) != null) {
        b4 = proof.set_new_key_section.bind(proof);
        proof.set_new_key_section = function(section) {
          var _ref11;
          b4(section);
          return this.per_team_key = (_ref11 = link_desc.corruptors) != null ? _ref11.per_team_key(section) : void 0;
        };
      }
      saved_customize_hook = proof._v_customize_json.bind(proof);
      proof._v_customize_json = (function(_this) {
        return function(payload) {
          var fik, fik_key, fik_user, _ref11, _ref12, _ref13;
          saved_customize_hook(payload);
          if (((_ref11 = link_desc.corruptors) != null ? _ref11.force_inner_key : void 0) != null) {
            fik = (_ref12 = link_desc.corruptors) != null ? _ref12.force_inner_key : void 0;
            fik_user = _this.forge.users[fik.user];
            assert(fik_user != null, "fik user");
            payload.body.key.username = fik_user.username;
            payload.body.key.uid = fik_user.uid;
            fik_key = fik_user.keys[fik.key || "default"];
            assert(fik_key != null, "receiver_user");
            payload.body.key.kid = fik_key.signing.get_ekid().toString("hex");
          }
          return (_ref13 = link_desc.corruptors) != null ? typeof _ref13.payload === "function" ? _ref13.payload(payload) : void 0 : void 0;
        };
      })(this);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_helper"
          });
          proof.generate_v2(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return proof_gen_out = arguments[0];
              };
            })(),
            lineno: 540
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len, _ref11;
          link_id = SHA256(proof_gen_out.outer, 'hex');
          link_entry = {
            proof: proof,
            proof_gen_out: proof_gen_out,
            link_id: link_id,
            for_client: {
              seqno: seqno,
              sig: proof_gen_out.armored,
              payload_json: proof_gen_out.inner.str,
              uid: user.uid,
              version: 2,
              debug_payload: proof_gen_out.inner.obj,
              debug_link_id: link_id,
              hidden_response: {
                resp_type: !(_this.last_committed_hidden_tail != null) ? 2 : 3,
                committed_hidden_tail: _this.last_committed_hidden_tail,
                uncommitted_seqno: _this._last_hidden_seqno()
              }
            }
          };
          if (link_desc.mangle_payload) {
            link_entry.for_client.payload_json = "%%%%mangled-json%%%%%";
          }
          _this.links.push(link_entry);
          _ref11 = link_desc.merkle_hashmetas || [];
          for (_i = 0, _len = _ref11.length; _i < _len; _i++) {
            hm_num = _ref11[_i];
            _this.forge.out.merkle_triples["" + _this.id + "-" + (_this.forge._hash_meta(hm_num))] = {
              seqno: seqno,
              id: link_entry.link_id
            };
          }
          _this.forge.out.merkle_triples["" + user.uid + "-" + hash_meta] = {
            seqno: 1,
            id: user.link_map[1]
          };
          return cb(null, {
            link_entry: link_entry
          });
        };
      })(this));
    };

    Team.prototype._forge_link_root = function(_arg, cb) {
      var esc, link_desc, proof_klass, sig_arg_kms, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_root");
      proof_klass = proofs.team.Root;
      sig_arg_team = {
        id: this.id,
        name: this.name,
        members: this._process_members_section(link_desc.members)
      };
      (function(_this) {
        return (function(__iced_k) {
          if (link_desc.use_other_key) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                funcname: "Team._forge_link_root"
              });
              _this._new_team_key({
                link_desc: link_desc,
                user: user,
                but_dont_save: true
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return sig_arg_kms = arguments[0].sig_arg_kms;
                  };
                })(),
                lineno: 591
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                  funcname: "Team._forge_link_root"
                });
                _this._new_team_key({
                  link_desc: link_desc,
                  user: user
                }, esc(__iced_deferrals.defer({
                  lineno: 592
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            });
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                funcname: "Team._forge_link_root"
              });
              _this._new_team_key({
                link_desc: link_desc,
                user: user
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return sig_arg_kms = arguments[0].sig_arg_kms;
                  };
                })(),
                lineno: 594
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (!link_desc.but_dont_make_a_link) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                  funcname: "Team._forge_link_root"
                });
                _this._forge_link_helper({
                  link_desc: link_desc,
                  user: user,
                  proof_klass: proof_klass,
                  sig_arg_team: sig_arg_team,
                  sig_arg_kms: sig_arg_kms
                }, esc(__iced_deferrals.defer({
                  lineno: 597
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Team.prototype._ptk_generation = function() {
      return this.ptsks_list.length;
    };

    Team.prototype._new_team_key = function(_arg, cb) {
      var boxes, but_dont_save, chain_type, ctext, d, entry, esc, generation, link_desc, ptsk, ptsk_prev, receiver_puk_kms, receiver_user, seed_check, sender_puk_kms, seqno, sig_arg_kms, sks, sks_post, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user, but_dont_save = _arg.but_dont_save, chain_type = _arg.chain_type, seqno = _arg.seqno;
      esc = make_esc(cb, "_new_team_key");
      chain_type || (chain_type = proofs.constants.seq_types.SEMIPRIVATE);
      ptsk_prev = null;
      if (this.ptsks_list.length > 0) {
        ptsk_prev = this.ptsks_list[this.ptsks_list.length - 1];
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._new_team_key"
          });
          PerTeamSecretKeys.make({
            prng: _this.forge.prng
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ptsk = arguments[0];
              };
            })(),
            lineno: 617
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref4, _ref5;
          generation = ((_ref4 = link_desc.corruptors) != null ? _ref4.ptk_gen : void 0) || _this.ptsks_list.length + 1;
          seed_check = compute_seed_check({
            ptsk: ptsk,
            prev: _this.ptsks_list.slice(-1)[0],
            team_id: _this.id
          });
          if (!(but_dont_save || ((_ref5 = link_desc.corruptors) != null ? _ref5.dont_save_key : void 0))) {
            _this.ptsks_list.push(ptsk);
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
              funcname: "Team._new_team_key"
            });
            user.get_puk_kms(esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return sender_puk_kms = arguments[0];
                };
              })(),
              lineno: 624
            })));
            __iced_deferrals._fulfill();
          })(function() {
            receiver_user = _this.forge.users[_this.forge.default_user_label];
            assert(receiver_user != null, "receiver_user");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                funcname: "Team._new_team_key"
              });
              receiver_user.get_puk_kms(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return receiver_puk_kms = arguments[0];
                  };
                })(),
                lineno: 627
              })));
              __iced_deferrals._fulfill();
            })(function() {
              assert(typeof receiver_puk_kms !== "undefined" && receiver_puk_kms !== null, "receiver_puk_kms");
              d = {};
              d[user.uid] = new PerTeamKeyBox({
                uid: user.uid,
                version: 1,
                per_user_key_seqno: 1,
                km: receiver_puk_kms.encryption
              });
              boxes = new PerTeamKeyBoxes(d);
              sks = new PerTeamSecretKeySet({
                generation: generation,
                boxes: boxes,
                encrypting_km: sender_puk_kms.encryption,
                prng: _this.forge.prng
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                  funcname: "Team._new_team_key"
                });
                sks.encrypt({
                  ptsk_new: ptsk,
                  ptsk_prev: ptsk_prev
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return sks_post = arguments[0];
                    };
                  })(),
                  lineno: 634
                })));
                __iced_deferrals._fulfill();
              })(function() {
                var _ref6;
                seqno = seqno || link_desc.seqno || _this._next_seqno();
                sig_arg_kms = {
                  generation: generation,
                  signing: ptsk.kms.signing,
                  encryption: ptsk.kms.encryption,
                  seed_check: seed_check
                };
                if (but_dont_save) {
                  return cb(null, {
                    generation: generation,
                    sig_arg_kms: sig_arg_kms
                  });
                }
                ctext = sks.boxes.d[user.uid].box;
                if (link_desc.corrupt_box) {
                  ctext[5] = 'f';
                  ctext[6] = 'f';
                  if (ctext[7] === 'f') {
                    ctext[7] = 'e';
                  } else {
                    ctext[7] = 'f';
                  }
                }
                entry = {
                  seqno: seqno,
                  chain_type: chain_type,
                  box: {
                    nonce: sks.nonce.at(1).buffer().toString('base64'),
                    sender_kid: sender_puk_kms.encryption.get_ekid().toString('hex'),
                    generation: sks_post.generation,
                    ctext: ctext.toString('base64'),
                    per_user_key_seqno: 1
                  },
                  prev: sks_post.prev || null
                };
                if (link_desc.corrupt_prev) {
                  if (entry.prev.slice(0, 4) === "ffff") {
                    entry.prev = 'fffe' + entry.prev.slice(4);
                  } else {
                    entry.prev = 'ffff' + entry.prev.slice(4);
                  }
                }
                if (!((_ref6 = link_desc.corruptors) != null ? _ref6.dont_save_key : void 0)) {
                  _this.team_key_boxes.push(entry);
                }
                return cb(null, {
                  generation: generation,
                  sig_arg_kms: sig_arg_kms
                });
              });
            });
          });
        };
      })(this));
    };

    Team.prototype._forge_link_change_membership = function(_arg, cb) {
      var esc, invs, link_desc, proof_klass, sig_arg_team, used_invs, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_change_membership");
      proof_klass = proofs.team.ChangeMembership;
      sig_arg_team = {
        id: this.id,
        members: this._process_members_section(link_desc.members)
      };
      if ((invs = link_desc.completed_invites) != null) {
        sig_arg_team.completed_invites = this._user_label_map_to_uvs(invs);
      }
      if ((used_invs = link_desc.used_invites) != null) {
        sig_arg_team.used_invites = this._map_used_invites_to_users(used_invs);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_change_membership"
          });
          _this._forge_link_helper({
            link_desc: link_desc,
            user: user,
            proof_klass: proof_klass,
            sig_arg_team: sig_arg_team
          }, esc(__iced_deferrals.defer({
            lineno: 696
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Team.prototype._forge_link_invite = function(_arg, cb) {
      var esc, link_desc, proof_klass, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_invite");
      sig_arg_team = {
        id: this.id,
        invites: link_desc.invites
      };
      proof_klass = proofs.team.Invite;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_invite"
          });
          _this._forge_link_helper({
            link_desc: link_desc,
            user: user,
            proof_klass: proof_klass,
            sig_arg_team: sig_arg_team
          }, esc(__iced_deferrals.defer({
            lineno: 707
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Team.prototype._forge_link_leave = function(_arg, cb) {
      var esc, link_desc, proof_klass, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_leave");
      sig_arg_team = {
        id: this.id
      };
      proof_klass = proofs.team.Leave;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_leave"
          });
          _this._forge_link_helper({
            link_desc: link_desc,
            user: user,
            proof_klass: proof_klass,
            sig_arg_team: sig_arg_team
          }, esc(__iced_deferrals.defer({
            lineno: 717
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Team.prototype._forge_link_rotate_key_hidden = function(_arg, cb) {
      var chain_type, esc, generation, link_desc, proof_klass, seqno, sig_arg_kms, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_rotate_key_hidden");
      sig_arg_team = {
        id: this.id
      };
      proof_klass = proofs.team_hidden.RotateKey;
      chain_type = proofs.constants.seq_types.TEAM_HIDDEN;
      seqno = this._next_hidden_seqno();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_rotate_key_hidden"
          });
          _this._new_team_key({
            link_desc: link_desc,
            user: user,
            chain_type: chain_type,
            seqno: seqno
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                sig_arg_kms = arguments[0].sig_arg_kms;
                return generation = arguments[0].generation;
              };
            })(),
            lineno: 728
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          sig_arg_kms.generation = generation;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
              funcname: "Team._forge_link_rotate_key_hidden"
            });
            _this._forge_link_helper_hidden({
              link_desc: link_desc,
              user: user,
              proof_klass: proof_klass,
              sig_arg_team: sig_arg_team,
              sig_arg_kms: sig_arg_kms
            }, esc(__iced_deferrals.defer({
              lineno: 730
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Team.prototype._forge_link_rotate_key = function(_arg, cb) {
      var esc, link_desc, proof_klass, sig_arg_kms, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_rotate_key");
      sig_arg_team = {
        id: this.id
      };
      proof_klass = proofs.team.RotateKey;
      (function(_this) {
        return (function(__iced_k) {
          if (link_desc.use_other_key) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                funcname: "Team._forge_link_rotate_key"
              });
              _this._new_team_key({
                link_desc: link_desc,
                user: user,
                but_dont_save: true
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return sig_arg_kms = arguments[0].sig_arg_kms;
                  };
                })(),
                lineno: 742
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                  funcname: "Team._forge_link_rotate_key"
                });
                _this._new_team_key({
                  link_desc: link_desc,
                  user: user
                }, esc(__iced_deferrals.defer({
                  lineno: 743
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            });
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                funcname: "Team._forge_link_rotate_key"
              });
              _this._new_team_key({
                link_desc: link_desc,
                user: user
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return sig_arg_kms = arguments[0].sig_arg_kms;
                  };
                })(),
                lineno: 745
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (!link_desc.but_dont_make_a_link) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
                  funcname: "Team._forge_link_rotate_key"
                });
                _this._forge_link_helper({
                  link_desc: link_desc,
                  user: user,
                  proof_klass: proof_klass,
                  sig_arg_team: sig_arg_team,
                  sig_arg_kms: sig_arg_kms
                }, esc(__iced_deferrals.defer({
                  lineno: 748
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Team.prototype._forge_link_new_subteam = function(_arg, cb) {
      var esc, link_desc, proof_klass, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_new_subteam");
      sig_arg_team = {
        id: this.id,
        subteam: link_desc.subteam
      };
      proof_klass = proofs.team.NewSubteam;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_new_subteam"
          });
          _this._forge_link_helper({
            link_desc: link_desc,
            user: user,
            proof_klass: proof_klass,
            sig_arg_team: sig_arg_team
          }, esc(__iced_deferrals.defer({
            lineno: 760
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Team.prototype._forge_link_unsupported = function(_arg, cb) {
      var esc, link_desc, proof_klass, sig_arg_team, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_unsupported_critical");
      sig_arg_team = {
        id: this.id
      };
      proof_klass = UnsupportedLink;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Volumes/Keybase (michal)/private/zapu/keybase_programming/team_chains_tests/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_unsupported"
          });
          _this._forge_link_helper({
            link_desc: link_desc,
            user: user,
            proof_klass: proof_klass,
            sig_arg_team: sig_arg_team
          }, esc(__iced_deferrals.defer({
            lineno: 771
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Team.prototype._process_members_section = function(members_desc) {
      var k, ret, valid;
      ret = {};
      valid = {
        "owner": true,
        "admin": true,
        "writer": true,
        "reader": true,
        "restricted_bot": true,
        "none": true
      };
      for (k in members_desc) {
        assert(valid[k], "invalid members key " + k);
        ret[k] = this._user_label_list_to_uvs(members_desc[k]);
      }
      return ret;
    };

    Team.prototype._user_label_list_to_uvs = function(user_labels) {
      var ret, user, user_label, _i, _len;
      ret = [];
      for (_i = 0, _len = user_labels.length; _i < _len; _i++) {
        user_label = user_labels[_i];
        user = this.forge.users[user_label];
        if (user == null) {
          throw new Error("couldn't find user " + user_label);
        }
        ret.push(user.uv_str());
      }
      return ret;
    };

    Team.prototype._user_label_map_to_uvs = function(user_labels) {
      var k, ret, user, user_label;
      ret = {};
      for (k in user_labels) {
        user_label = user_labels[k];
        user = this.forge.users[user_label];
        if (user == null) {
          throw new Error("couldn't find user " + user_label);
        }
        ret[k] = user.uv_str();
      }
      return ret;
    };

    Team.prototype._map_used_invites_to_users = function(used_invites) {
      return used_invites.map((function(_this) {
        return function(_arg) {
          var id, user, uv;
          uv = _arg.uv, id = _arg.id;
          user = _this.forge.users[uv];
          if (user == null) {
            throw new Error("couldn't find user " + uv);
          }
          return {
            id: id,
            uv: user.uv_str()
          };
        };
      })(this));
    };

    Team.prototype._hash_team_id = function(team_name) {
      var h, id;
      h = SHA256(team_name.toLowerCase()).slice(0, 15);
      id = h.toString('hex') + "24";
      return id;
    };

    Team.prototype._next_seqno = function() {
      return this._last_seqno() + 1;
    };

    Team.prototype._last_seqno = function() {
      if (this.links.length > 0) {
        return this.links[this.links.length - 1].for_client.seqno;
      } else {
        return 0;
      }
    };

    Team.prototype._next_hidden_seqno = function() {
      return this._last_hidden_seqno() + 1;
    };

    Team.prototype._last_hidden_seqno = function() {
      if (this.hidden_links.length > 0) {
        return this.hidden_links[this.hidden_links.length - 1].for_client.hidden_response.uncommitted_seqno;
      } else {
        return 0;
      }
    };

    return Team;

  })();

  UnsupportedLink = (function(_super) {
    __extends(UnsupportedLink, _super);

    function UnsupportedLink() {
      return UnsupportedLink.__super__.constructor.apply(this, arguments);
    }

    UnsupportedLink.prototype._type = function() {
      return "team.unsupported_from_the_future";
    };

    UnsupportedLink.prototype._type_v2 = function() {
      return 1337;
    };

    return UnsupportedLink;

  })(proofs.team.TeamBase);

  SHA256 = function(x, enc) {
    return createHash('SHA256').update(x).digest(enc);
  };

}).call(this);
