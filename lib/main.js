// Generated by IcedCoffeeScript 1.8.0-e
(function() {
  var CSON, Chain, Forge, JSON5, Runner, drain, fs, iced, ics, make_esc, minimist, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  minimist = require('minimist');

  CSON = require('cson');

  fs = require('fs');

  make_esc = require('iced-error').make_esc;

  JSON5 = require('json5');

  drain = require('iced-utils').drain;

  Forge = require('./forge').Forge;

  ics = require('iced-coffee-script');

  exports.Chain = Chain = (function() {
    function Chain(_arg) {
      this.file = _arg.file, this.fh = _arg.fh, this.format = _arg.format, this.outfh = _arg.outfh;
      this._raw = null;
      this._dat = null;
    }

    Chain.prototype.load = function(_arg, cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      _arg;
      esc = make_esc(cb, "load");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
            funcname: "Chain.load"
          });
          _this._read(esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1._raw = arguments[0];
              };
            })(_this),
            lineno: 24
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
              funcname: "Chain.load"
            });
            _this._parse(_this._raw, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1._dat = arguments[0];
                };
              })(_this),
              lineno: 25
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null, _this._dat);
          });
        };
      })(this));
    };

    Chain.prototype.get_data = function() {
      return this._dat;
    };

    Chain.prototype._read = function(cb) {
      var dat, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_read");
      (function(_this) {
        return (function(__iced_k) {
          if (_this.fh != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
                funcname: "Chain._read"
              });
              drain.drain(_this.fh, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return dat = arguments[0];
                  };
                })(),
                lineno: 37
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
                funcname: "Chain._read"
              });
              fs.readFile(_this.file, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return dat = arguments[0];
                  };
                })(),
                lineno: 39
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(_this._guess_format(_this.file));
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, dat);
        };
      })(this));
    };

    Chain.prototype._guess_format = function() {
      var m;
      if ((m = this.file.match(/^(.*)\.([^.]*)$/))) {
        this.stem = m[1];
        if (!this.format) {
          return this.format = m[2];
        }
      }
    };

    Chain.prototype._parse = function(raw, cb) {
      var e, err, f, obj, _ref;
      err = obj = null;
      try {
        switch ((f = (_ref = this.format) != null ? _ref.toLowerCase() : void 0)) {
          case 'json':
            obj = JSON.parse(raw);
            break;
          case 'cson':
            obj = CSON.parse(raw);
            break;
          case 'json5':
            obj = JSON5.parse(raw);
            break;
          case 'iced':
            obj = ics["eval"](raw.toString());
            break;
          default:
            err = new Error("unknown format: " + f);
        }
      } catch (_error) {
        e = _error;
        err = e;
      }
      return cb(err, obj);
    };

    Chain.prototype.output = function(dat, cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if (_this.outfh) {
            return __iced_k(_this.outfh.write(dat));
          } else {
            (function(__iced_k) {
              if (_this.stem != null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
                    funcname: "Chain.output"
                  });
                  fs.writeFile("" + _this.stem + ".chain", dat, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return err = arguments[0];
                      };
                    })(),
                    lineno: 76
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k(err = new Error('no output possible'));
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    return Chain;

  })();

  exports.Runner = Runner = (function() {
    function Runner(_arg) {
      _arg;
      this._files = [];
    }

    Runner.prototype.parse_argv = function(_arg, cb) {
      var argv, parsed;
      argv = _arg.argv;
      parsed = minimist(argv, {
        boolean: ["c", "check"]
      });
      this._files = parsed._;
      this.format = parsed.f || parsed.formated;
      this.check_only = parsed.c || parsed.check;
      return cb(null);
    };

    Runner.prototype.run = function(_arg, cb) {
      var argv, c, esc, f, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      argv = _arg.argv;
      esc = make_esc(cb, "run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
            funcname: "Runner.run"
          });
          _this.parse_argv({
            argv: argv
          }, esc(__iced_deferrals.defer({
            lineno: 97
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (_this._files.length) {
            _this._chains = (function() {
              var _i, _len, _ref, _results;
              _ref = this._files;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                f = _ref[_i];
                _results.push(new Chain({
                  file: f,
                  format: this.format
                }));
              }
              return _results;
            }).call(_this);
          } else {
            _this._chains = [
              new Chain({
                fh: process.stdin,
                format: _this.format,
                outfh: process.stdout
              })
            ];
          }
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = _this._chains;
            _len = _ref.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                c = _ref[_i];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
                    funcname: "Runner.run"
                  });
                  c.load({}, esc(__iced_deferrals.defer({
                    lineno: 105
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  f = new Forge({
                    chain: c.get_data().chain
                  });
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
                      funcname: "Runner.run"
                    });
                    f.forge(esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return out = arguments[0];
                        };
                      })(),
                      lineno: 107
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      if (!_this.check_only) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
                            funcname: "Runner.run"
                          });
                          c.output(JSON.stringify(out), esc(__iced_deferrals.defer({
                            lineno: 108
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(_next);
                  });
                });
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    return Runner;

  })();

  exports.main = function() {
    var err, r, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    r = new Runner({});
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/node-forge-sigchain/src/main.iced",
          funcname: "main"
        });
        r.run({
          argv: process.argv.slice(2)
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 116
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err !== "undefined" && err !== null) {
          console.log(err.toString());
          return process.exit(2);
        } else {
          return process.exit(0);
        }
      };
    })(this));
  };

}).call(this);
